// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for parami_did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-26, STEPS: `2`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parami
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=parami_did
// --extrinsic=*
// --steps=2
// --repeat=50
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/did/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parami_did.
pub trait WeightInfo {
    fn register() -> Weight;
    fn transfer() -> Weight;
    fn revoke() -> Weight;
    fn set_metadata(k: u32, v: u32, ) -> Weight;
}

/// Weights for parami_did using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Storage: Did DidOf (r:1 w:1)
    // Storage: Did Metadata (r:1 w:1)
    // Storage: Did ReferrerOf (r:0 w:1)
    fn register() -> Weight {
        (17_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    // Storage: Did DidOf (r:2 w:2)
    // Storage: Did Metadata (r:1 w:1)
    fn transfer() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    // Storage: Did DidOf (r:1 w:1)
    // Storage: Did Metadata (r:1 w:1)
    fn revoke() -> Weight {
        (15_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    // Storage: Did DidOf (r:1 w:0)
    fn set_metadata(k: u32, _v: u32, ) -> Weight {
        (3_511_000 as Weight)
            // Standard Error: 0
            .saturating_add((5_000 as Weight).saturating_mul(k as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: Did DidOf (r:1 w:1)
    // Storage: Did Metadata (r:1 w:1)
    // Storage: Did ReferrerOf (r:0 w:1)
    fn register() -> Weight {
        (17_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    // Storage: Did DidOf (r:2 w:2)
    // Storage: Did Metadata (r:1 w:1)
    fn transfer() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    // Storage: Did DidOf (r:1 w:1)
    // Storage: Did Metadata (r:1 w:1)
    fn revoke() -> Weight {
        (15_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    // Storage: Did DidOf (r:1 w:0)
    fn set_metadata(k: u32, _v: u32, ) -> Weight {
        (3_511_000 as Weight)
            // Standard Error: 0
            .saturating_add((5_000 as Weight).saturating_mul(k as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
    }
}
